<UserControl x:Class="PokerTracker3000.WpfComponents.Player"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
             xmlns:components="clr-namespace:PokerTracker3000.WpfComponents"
             xmlns:converters="clr-namespace:PokerTracker3000.WpfComponents.Converters">

    <UserControl.Resources>
        <converters:BoolToZeroOrNumberConverter x:Key="boolToZeroOrNumberConverter" />
        <converters:ValueDisplayConverter x:Key="valueDisplayConverter" />

        <Storyboard x:Key="scaleUp"
                    PresentationOptions:Freeze="True">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleX)">
                <EasingDoubleKeyFrame Value="1.2"
                                      KeyTime="0:0:0.3">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <QuarticEase EasingMode="EaseOut"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleY)">
                <EasingDoubleKeyFrame Value="1.2"
                           KeyTime="0:0:0.3">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <QuarticEase EasingMode="EaseOut"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>

        <Storyboard x:Key="scaleDown"
            PresentationOptions:Freeze="True">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleX)">
                <EasingDoubleKeyFrame Value="1.0"
                           KeyTime="0:0:0.3">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <QuarticEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame> 
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleY)">
                <EasingDoubleKeyFrame Value="1.0"
               KeyTime="0:0:0.3">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <QuarticEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>

        <Storyboard x:Key="bouncingScalingAnimation"
             PresentationOptions:Freeze="True"
                    RepeatBehavior="Forever"
                    AutoReverse="True">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleX)">
                <EasingDoubleKeyFrame Value="1.15"
                               KeyTime="0:0:0.7">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <QuadraticEase EasingMode="EaseOut" />
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleY)">
                <EasingDoubleKeyFrame Value="1.15"
                                      KeyTime="0:0:0.7">
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>

        <Storyboard x:Key="moveToZero"
                    PresentationOptions:Freeze="True">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.(TranslateTransform.Y)">
                <EasingDoubleKeyFrame Value="0"
                                      KeyTime="0:0:0.3">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CubicEase EasingMode="EaseOut"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>

            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.(TranslateTransform.X)">
                <EasingDoubleKeyFrame Value="0"
                          KeyTime="0:0:0.3">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CubicEase EasingMode="EaseOut"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>

        <Storyboard x:Key="moveUp"
            PresentationOptions:Freeze="True">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.(TranslateTransform.Y)">
                <EasingDoubleKeyFrame Value="-30"
                              KeyTime="0:0:0.3">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CubicEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>

        <Storyboard x:Key="moveDown"
                    PresentationOptions:Freeze="True">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.(TranslateTransform.Y)">
                <EasingDoubleKeyFrame Value="30"
                      KeyTime="0:0:0.3">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CubicEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>

        <Storyboard x:Key="moveRight"
            PresentationOptions:Freeze="True">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.(TranslateTransform.X)">
                <EasingDoubleKeyFrame Value="50"
              KeyTime="0:0:0.3">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CubicEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>

        <Storyboard x:Key="moveLeft"
                    PresentationOptions:Freeze="True">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.(TranslateTransform.X)">
                <EasingDoubleKeyFrame Value="-50"
                                      KeyTime="0:0:0.3">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CubicEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>

        <Style x:Key="mainPlayerCardBorder" TargetType="{x:Type Border}">
            <Setter Property="Visibility" Value="Visible" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
            <Setter Property="RenderTransform">
                <Setter.Value>
                    <ScaleTransform ScaleX="1.0" ScaleY="1.0"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SpotData.IsHighlighted}" Value="True">
                    <DataTrigger.EnterActions>
                        <BeginStoryboard Storyboard="{StaticResource scaleUp}" />
                    </DataTrigger.EnterActions>
                    <DataTrigger.ExitActions>
                        <BeginStoryboard Storyboard="{StaticResource scaleDown}" />
                    </DataTrigger.ExitActions>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=SpotData.PlayerData}" Value="{x:Null}">
                    <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="playerNameStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MainTextBlockStyle}">
            <Setter Property="FontSize" Value="21" />
            <Setter Property="Opacity" Value="0.6" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Top" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SpotData.IsHighlighted}" Value="True">
                    <DataTrigger.EnterActions>
                        <BeginStoryboard Storyboard="{StaticResource animateOpacityToOne}" />
                    </DataTrigger.EnterActions>
                    <DataTrigger.ExitActions>
                        <BeginStoryboard Storyboard="{StaticResource animateOpacityToPointSix}" />
                    </DataTrigger.ExitActions>
                </DataTrigger>

                <DataTrigger Binding="{Binding Path=SpotData.IsEliminated}" Value="True">
                    <Setter Property="Foreground" Value="{StaticResource MainErrorColorDisabled}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.TopLeft}">
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                    <Setter Property="VerticalAlignment" Value="Top" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.TopCenter}">
                    <Setter Property="HorizontalAlignment" Value="Center"/>
                    <Setter Property="VerticalAlignment" Value="Top" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.TopRight}">
                    <Setter Property="HorizontalAlignment" Value="Right"/>
                    <Setter Property="VerticalAlignment" Value="Top" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.BottomLeft}">
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                    <Setter Property="VerticalAlignment" Value="Bottom" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.BottomCenter}">
                    <Setter Property="HorizontalAlignment" Value="Center"/>
                    <Setter Property="VerticalAlignment" Value="Bottom" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.BottomRight}">
                    <Setter Property="HorizontalAlignment" Value="Right"/>
                    <Setter Property="VerticalAlignment" Value="Bottom" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.Left}">
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.Right}">
                    <Setter Property="HorizontalAlignment" Value="Right"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="aligningStackPanel" TargetType="{x:Type StackPanel}">
            <Setter Property="VerticalAlignment" Value="Top" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.TopLeft}">
                    <Setter Property="VerticalAlignment" Value="Top"/>
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.TopCenter}">
                    <Setter Property="VerticalAlignment" Value="Top" />
                    <Setter Property="HorizontalAlignment" Value="Center"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.TopRight}">
                    <Setter Property="VerticalAlignment" Value="Top" />
                    <Setter Property="HorizontalAlignment" Value="Right"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.BottomLeft}">
                    <Setter Property="VerticalAlignment" Value="Bottom"/>
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.BottomCenter}">
                    <Setter Property="VerticalAlignment" Value="Bottom" />
                    <Setter Property="HorizontalAlignment" Value="Center"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.BottomRight}">
                    <Setter Property="VerticalAlignment" Value="Bottom" />
                    <Setter Property="HorizontalAlignment" Value="Right"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.Left}">
                    <Setter Property="VerticalAlignment" Value="Center" />
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.Right}">
                    <Setter Property="VerticalAlignment" Value="Center" />
                    <Setter Property="HorizontalAlignment" Value="Right"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <RadialGradientBrush x:Key="radialImageMask"
                      GradientOrigin="0.5,0.5"
                      Center="0.5,0.5"
                      RadiusX="0.5"
                      RadiusY="0.5">
            <RadialGradientBrush.GradientStops>
                <GradientStop Color="{StaticResource NoColor}" Offset="0" />
                <GradientStop Color="{StaticResource NoColor}" Offset="0.8" />
                <GradientStop Color="Transparent" Offset="1" />
            </RadialGradientBrush.GradientStops>
        </RadialGradientBrush>

        <LinearGradientBrush x:Key="crossOpacityMask"
                      StartPoint="0,0.5" EndPoint="1,0.5">
            <LinearGradientBrush.GradientStops>
                <GradientStop Offset="0" Color="Black" />
                <GradientStop Offset="0.1" Color="Transparent" />
                <GradientStop Offset="0.9" Color="Transparent" />
                <GradientStop Offset="1" Color="Black" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>

        <Style x:Key="imageBorderBase" TargetType="{x:Type Border}">
            <Setter Property="Visibility" Value="Collapsed" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
            <Setter Property="RenderTransform">
                <Setter.Value>
                    <TranslateTransform X="0" Y="0" />
                </Setter.Value>
            </Setter>
            <Setter Property="Height"
                    Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}},
                                Path=ActualHeight,
                                Converter={StaticResource scaleNumberConverter},
                                ConverterParameter=*0.75}" />
        </Style>

        <Style x:Key="imageBorderAboveText" TargetType="{x:Type Border}" BasedOn="{StaticResource imageBorderBase}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.BottomLeft}">
                    <Setter Property="Visibility" Value="Visible"/>
                    <Setter Property="HorizontalAlignment" Value="Left" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.BottomCenter}">
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="HorizontalAlignment" Value="Center" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.BottomRight}">
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="HorizontalAlignment" Value="Right" />
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=SpotData.IsHighlighted}" Value="True" />
                        <Condition Binding="{Binding Path=AlwaysShowPlayerImage}" Value="False" />
                    </MultiDataTrigger.Conditions>

                    <MultiDataTrigger.EnterActions>
                        <BeginStoryboard Storyboard="{StaticResource moveToZero}" />
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>
                        <BeginStoryboard Storyboard="{StaticResource moveUp}" />
                    </MultiDataTrigger.ExitActions>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="imageBorderBelowText" TargetType="{x:Type Border}" BasedOn="{StaticResource imageBorderBase}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.TopLeft}">
                    <Setter Property="Visibility" Value="Visible"/>
                    <Setter Property="HorizontalAlignment" Value="Left" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.TopCenter}">
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="HorizontalAlignment" Value="Center" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.TopRight}">
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="HorizontalAlignment" Value="Right" />
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=SpotData.IsHighlighted}" Value="True" />
                        <Condition Binding="{Binding Path=AlwaysShowPlayerImage}" Value="False" />
                    </MultiDataTrigger.Conditions>

                    <MultiDataTrigger.EnterActions>
                        <BeginStoryboard Storyboard="{StaticResource moveToZero}" />
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>
                        <BeginStoryboard Storyboard="{StaticResource moveDown}" />
                    </MultiDataTrigger.ExitActions>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="imageBorderLeftOfText" TargetType="{x:Type Border}" BasedOn="{StaticResource imageBorderBase}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.Right}">
                    <Setter Property="Visibility" Value="Visible"/>
                    <Setter Property="HorizontalAlignment" Value="Left" />
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=SpotData.IsHighlighted}" Value="True" />
                        <Condition Binding="{Binding Path=AlwaysShowPlayerImage}" Value="False" />
                    </MultiDataTrigger.Conditions>

                    <MultiDataTrigger.EnterActions>
                        <BeginStoryboard Storyboard="{StaticResource moveToZero}" />
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>
                        <BeginStoryboard Storyboard="{StaticResource moveLeft}" />
                    </MultiDataTrigger.ExitActions>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="imageBorderRightOfText" TargetType="{x:Type Border}" BasedOn="{StaticResource imageBorderBase}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.Left}">
                    <Setter Property="Visibility" Value="Visible"/>
                    <Setter Property="HorizontalAlignment" Value="Right" />
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=SpotData.IsHighlighted}" Value="True" />
                        <Condition Binding="{Binding Path=AlwaysShowPlayerImage}" Value="False" />
                    </MultiDataTrigger.Conditions>

                    <MultiDataTrigger.EnterActions>
                        <BeginStoryboard Storyboard="{StaticResource moveToZero}" />
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>
                        <BeginStoryboard Storyboard="{StaticResource moveRight}" />
                    </MultiDataTrigger.ExitActions>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="playerImage" TargetType="{x:Type components:GreyableImage}">
            <Setter Property="Source" Value="{Binding Path=SpotData.PlayerData.Information.PathToImage}" />
            <Setter Property="OpacityMask" Value="{StaticResource radialImageMask}" />
            <Setter Property="Opacity" Value="{Binding Path=AlwaysShowPlayerImage,
                Converter={StaticResource boolToZeroOrNumberConverter},
                ConverterParameter=0.6}" />
            <Setter Property="IsEnabled" Value="True" />
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=SpotData.IsHighlighted}" Value="True" />
                        <Condition Binding="{Binding Path=AlwaysShowPlayerImage}" Value="False" />
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.EnterActions>
                        <BeginStoryboard Storyboard="{StaticResource animateOpacityToOne}" />
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>
                        <BeginStoryboard Storyboard="{StaticResource animateOpacityToZero}" />
                    </MultiDataTrigger.ExitActions>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=SpotData.IsHighlighted}" Value="True" />
                        <Condition Binding="{Binding Path=AlwaysShowPlayerImage}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.EnterActions>
                        <BeginStoryboard Storyboard="{StaticResource animateOpacityToOne}" />
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>
                        <BeginStoryboard Storyboard="{StaticResource animateOpacityToPointSix}" />
                    </MultiDataTrigger.ExitActions>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding Path=SpotData.IsEliminated}" Value="True">
                    <Setter Property="IsEnabled" Value="False" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="crossedOutMark" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource SymbolButtonStyle}">
            <Setter Property="Foreground" Value="{StaticResource MainErrorColorDisabled}" />
            <Setter Property="Text" Value="&#xE711;" />
            <Setter Property="FontSize" Value="150" />
            <Setter Property="Visibility" Value="Collapsed" />
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=SpotData.IsHighlighted}" Value="True" />
                        <Condition Binding="{Binding Path=AlwaysShowPlayerImage}" Value="False" />
                        <Condition Binding="{Binding Path=SpotData.IsEliminated}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter Property="Visibility" Value="Visible" />
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=SpotData.IsHighlighted}" Value="True" />
                        <Condition Binding="{Binding Path=AlwaysShowPlayerImage}" Value="True" />
                        <Condition Binding="{Binding Path=SpotData.IsEliminated}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter Property="Visibility" Value="Visible" />
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>

            </Style.Triggers>
        </Style>

        <Style x:Key="playerBeingMovedMarker" TargetType="{x:Type Border}">
            <Setter Property="BorderBrush" Value="{StaticResource MainSuccessColorDisabled}" />
            <Setter Property="OpacityMask" Value="{StaticResource crossOpacityMask}" />
            <Setter Property="BorderThickness" Value="4" />
            <Setter Property="CornerRadius" Value="10" />
            <Setter Property="Opacity" Value="0.8" />
            <Setter Property="Visibility" Value="{Binding Path=SpotData.IsBeingMoved, Converter={StaticResource booleanToVisibleOrCollapsedConverter}}" />
            <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
            <Setter Property="RenderTransform">
                <Setter.Value>
                    <ScaleTransform ScaleX="1.0" ScaleY="1.0"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=SpotData.IsHighlighted}" Value="True">
                    <DataTrigger.EnterActions>
                        <BeginStoryboard Name="scaleAnimation"
                                 Storyboard="{StaticResource bouncingScalingAnimation}" />
                    </DataTrigger.EnterActions>
                    <DataTrigger.ExitActions>
                        <StopStoryboard BeginStoryboardName="scaleAnimation" />
                    </DataTrigger.ExitActions>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>

    <Border DataContext="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}}, Path=.}"
            Style="{StaticResource mainPlayerCardBorder}">

        <Grid>

            <!-- Is being moved marker -->
            <Border Style="{StaticResource playerBeingMovedMarker}" />

            <!-- Vertically oriented spot info -->
            <StackPanel Orientation="Vertical">
                <StackPanel.Style>
                    <Style TargetType="{x:Type StackPanel}">
                        <Setter Property="Visibility" Value="Visible" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.Left}">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.Right}">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </StackPanel.Style>

                <!-- Image above -->
                <Border Style="{StaticResource imageBorderAboveText}">
                    <Grid>
                        <components:GreyableImage Style="{StaticResource playerImage}" />
                        <TextBlock Style="{StaticResource crossedOutMark}" />
                    </Grid>
                </Border>

                <!-- Name and money in the pot -->
                <StackPanel Orientation="Vertical"
                            Style="{StaticResource aligningStackPanel}">

                    <!-- Player name -->
                    <TextBlock  Style="{StaticResource playerNameStyle}"
                                Text="{Binding Path=SpotData.PlayerData.Information.Name}"/>

                    <!-- Money in the pot -->
                    <StackPanel Orientation="Horizontal"
                                Style="{StaticResource aligningStackPanel}">
                        <TextBlock  Style="{StaticResource playerNameStyle}"
                                    Text="MONEY IN THE POT: "
                                    FontSize="10"
                                    VerticalAlignment="Bottom"
                                    Margin="0,0,0,3"/>
                        <TextBlock  Style="{StaticResource playerNameStyle}"
                                    FontSize="16">
                            <TextBlock.Text>
                                <MultiBinding Converter="{StaticResource valueDisplayConverter}">
                                    <Binding Path="SpotData.PlayerData.Information.MoneyInThePot" />
                                    <Binding Path="CurrentCurrency" />
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                    </StackPanel>
                </StackPanel>

                <!-- Image below -->
                <Border Style="{StaticResource imageBorderBelowText}">
                    <Grid>
                    <components:GreyableImage Style="{StaticResource playerImage}" />
                        <TextBlock Style="{StaticResource crossedOutMark}" />
                    </Grid>
                </Border>
            </StackPanel>

            <!-- Horizontally oriented spot info -->
            <StackPanel Orientation="Horizontal">
                <StackPanel.Style>
                    <Style TargetType="{x:Type StackPanel}">
                        <Setter Property="Visibility" Value="Collapsed" />
                        <Setter Property="HorizontalAlignment" Value="Left" />
                        <Setter Property="Margin" Value="0" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.Left}">
                                <Setter Property="Visibility" Value="Visible" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=Alignment}" Value="{x:Static components:Player+SpotAlignment.Right}">
                                <Setter Property="Visibility" Value="Visible" />
                                <Setter Property="HorizontalAlignment" Value="Right" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </StackPanel.Style>

                <!-- Image left of text -->
                <Border Style="{StaticResource imageBorderLeftOfText}">
                    <Grid>
                        <components:GreyableImage Style="{StaticResource playerImage}" />
                        <TextBlock Style="{StaticResource crossedOutMark}" />
                    </Grid>
                </Border>

                <!-- Name and money in the pot -->
                <StackPanel Orientation="Vertical"
                Style="{StaticResource aligningStackPanel}">

                    <!-- Player name -->
                    <TextBlock  Style="{StaticResource playerNameStyle}"
                                Text="{Binding Path=SpotData.PlayerData.Information.Name}"/>

                    <!-- Money in the pot -->
                    <StackPanel Orientation="Horizontal"
                                Style="{StaticResource aligningStackPanel}">
                        <TextBlock  Style="{StaticResource playerNameStyle}"
                                    Text="MONEY IN THE POT: "
                                    FontSize="10"
                                    VerticalAlignment="Bottom"
                                    Margin="0,0,0,3"/>
                        <TextBlock  Style="{StaticResource playerNameStyle}"
                                    FontSize="16"
                                    Text="{Binding Path=SpotData.PlayerData.Information.MoneyInThePot}" />
                    </StackPanel>
                </StackPanel>

                <!-- Image right of text -->
                <Border Style="{StaticResource imageBorderRightOfText}">
                    <Grid>
                        <components:GreyableImage Style="{StaticResource playerImage}" />
                        <TextBlock Style="{StaticResource crossedOutMark}" />
                    </Grid>
                </Border>
            </StackPanel>

            <!-- Player info box -->
            <Border Background="{StaticResource BackgroundColorDarkerShadeWithOpacity}"
                    CornerRadius="10"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Padding="10">
                <Border.Style>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Opacity" Value="0" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=SpotData.IsSelected}" Value="True">
                                <DataTrigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource animateOpacityToOne}" />
                                </DataTrigger.EnterActions>
                                <DataTrigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource animateOpacityToZero}" />
                                </DataTrigger.ExitActions>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
                <ItemsControl ItemsSource="{Binding Path=SpotData.SpotOptions}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <UniformGrid Columns="2" />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <components:EditPlayerOptionBox OptionModel="{Binding Path=.}"
                                                            Margin="5"/>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </Border>
        </Grid>
    </Border>
</UserControl>
